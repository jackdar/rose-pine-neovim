local palette = require('rose-pine.palette')
local blend = require('rose-pine.util').blend

local M = {}

function M.get(config)
	local theme = {}
	local groups = config.groups
	local colors = palette[config.variant or 'main']
	local styles = {
		italic = (config.disable_italics and 'italic') or 'NONE',
		vert_split = (config.bold_vert_split and colors.surface) or colors.none,
		background = (config.disable_background and colors.none) or colors.base,
		float_background = (config.disable_float_background and colors.none) or colors.surface,
		inactive_background = (config.dim_nc_background and colors.surface) or colors.base,
	}

	theme = {
		ColorColumn = { bg = colors.highlight_high },
		Conceal = { bg = colors.none },
		-- Cursor = {},
		CursorColumn = { bg = colors.overlay },
		-- CursorIM = {},
		CursorLine = { bg = colors.overlay },
		CursorLineNr = { fg = colors.text },
		DarkenedPanel = { bg = colors.surface },
		DarkenedStatusline = { bg = colors.surface },
		DiffAdd = { bg = blend(groups.git_add, colors.base, 0.5) },
		DiffChange = { bg = colors.overlay },
		DiffDelete = { bg = blend(groups.git_delete, colors.base, 0.5) },
		DiffText = { bg = blend(groups.git_text, colors.base, 0.5) },
		diffAdded = { link = 'DiffAdd' },
		diffChanged = { link = 'DiffChange' },
		diffRemoved = { link = 'DiffDelete' },
		Directory = { fg = colors.foam, bg = colors.none },
		-- EndOfBuffer = {},
		ErrorMsg = { fg = colors.love, style = 'bold' },
		FloatBorder = { fg = groups.border },
		FoldColumn = { fg = colors.muted },
		Folded = { fg = colors.text, bg = colors.surface },
		IncSearch = { fg = colors.base, bg = colors.rose },
		LineNr = { fg = colors.muted },
		MatchParen = { fg = colors.text, bg = colors.highlight_med },
		ModeMsg = { fg = colors.subtle },
		MoreMsg = { fg = colors.iris },
		NonText = { fg = colors.muted },
		Normal = { fg = colors.text, bg = styles.background },
		NormalFloat = { fg = colors.text, bg = styles.float_background },
		NormalNC = { fg = colors.text, bg = styles.inactive_background },
		NvimInternalError = { fg = '#ffffff', bg = colors.love },
		Pmenu = { fg = colors.subtle, bg = styles.float_background },
		PmenuSbar = { bg = colors.highlight_low },
		PmenuSel = { fg = colors.text, bg = colors.overlay },
		PmenuThumb = { bg = colors.highlight_med },
		Question = { fg = colors.gold },
		-- QuickFixLine = {},
		-- RedrawDebugNormal = {}
		RedrawDebugClear = { fg = '#ffffff', bg = colors.gold },
		RedrawDebugComposed = { fg = '#ffffff', bg = colors.pine },
		RedrawDebugRecompose = { fg = '#ffffff', bg = colors.love },
		Search = { bg = colors.highlight_med },
		SpecialKey = { fg = colors.foam },
		SpellBad = { sp = colors.love, style = 'undercurl' },
		SpellCap = { sp = colors.subtle, style = 'undercurl' },
		SpellLocal = { sp = colors.subtle, style = 'undercurl' },
		SpellRare = { sp = colors.subtle, style = 'undercurl' },
		SignColumn = { fg = colors.text, bg = styles.background },
		StatusLine = { fg = colors.subtle, bg = colors.surface },
		StatusLineNC = { fg = colors.muted, bg = colors.base },
		StatusLineTerm = { link = 'StatusLine' },
		StatusLineTermNC = { link = 'StatusLineNC' },
		TabLine = { fg = colors.subtle, bg = colors.surface },
		TabLineFill = { bg = colors.surface },
		TabLineSel = { fg = colors.text, bg = colors.overlay },
		Title = { fg = colors.text },
		VertSplit = { fg = colors.overlay, bg = styles.vert_split },
		Visual = { bg = colors.highlight_med },
		-- VisualNOS = {},
		WarningMsg = { fg = colors.gold },
		-- Whitespace = {},
		-- WildMenu = {},

		Boolean = { fg = colors.rose },
		Character = { fg = colors.gold },
		Comment = { fg = groups.comment, style = styles.italic },
		Conditional = { fg = colors.pine },
		Constant = { fg = colors.gold },
		Debug = { fg = colors.rose },
		Define = { fg = colors.iris },
		Delimiter = { fg = colors.subtle },
		Error = { fg = colors.love },
		Exception = { fg = colors.pine },
		Float = { fg = colors.gold },
		Function = { fg = colors.rose },
		Identifier = { fg = colors.rose },
		-- Ignore = {},
		Include = { fg = colors.iris },
		Keyword = { fg = colors.pine },
		Label = { fg = colors.foam },
		Macro = { fg = colors.iris },
		Number = { fg = colors.gold },
		Operator = { fg = colors.subtle },
		PreCondit = { fg = colors.iris },
		PreProc = { fg = colors.iris },
		Repeat = { fg = colors.pine },
		Special = { fg = colors.rose },
		SpecialChar = { fg = colors.rose },
		SpecialComment = { fg = colors.iris },
		Statement = { fg = colors.pine },
		StorageClass = { fg = colors.foam },
		String = { fg = colors.gold },
		Structure = { fg = colors.foam },
		Tag = { fg = colors.rose },
		Todo = { fg = colors.iris },
		Type = { fg = colors.foam },
		Typedef = { fg = colors.foam },
		Underlined = { style = 'underline' },

		htmlArg = { fg = colors.iris },
		htmlBold = { style = 'bold' },
		htmlEndTag = { fg = colors.subtle },
		htmlH1 = { fg = groups.headings.h1, style = 'bold' },
		htmlH2 = { fg = groups.headings.h2, style = 'bold' },
		htmlH3 = { fg = groups.headings.h3, style = 'bold' },
		htmlH4 = { fg = groups.headings.h4, style = 'bold' },
		htmlH5 = { fg = groups.headings.h5, style = 'bold' },
		htmlItalic = { style = styles.italic },
		htmlLink = { fg = groups.link },
		htmlTag = { fg = colors.subtle },
		htmlTagN = { fg = colors.text },
		htmlTagName = { fg = colors.foam },

		markdownDelimiter = { fg = colors.subtle },
		markdownH1 = { fg = groups.headings.h1, style = 'bold' },
		markdownH1Delimiter = { link = 'markdownH1' },
		markdownH2 = { fg = groups.headings.h2, style = 'bold' },
		markdownH2Delimiter = { link = 'markdownH2' },
		markdownH3 = { fg = groups.headings.h3, style = 'bold' },
		markdownH3Delimiter = { link = 'markdownH3' },
		markdownH4 = { fg = groups.headings.h4, style = 'bold' },
		markdownH4Delimiter = { link = 'markdownH4' },
		markdownH5 = { fg = groups.headings.h5, style = 'bold' },
		markdownH5Delimiter = { link = 'markdownH5' },
		markdownH6 = { fg = groups.headings.h6, style = 'bold' },
		markdownH6Delimiter = { link = 'markdownH6' },
		markdownLinkText = { fg = groups.link, style = 'underline' },
		markdownUrl = { link = 'markdownLinkText' },

		mkdCode = { fg = colors.foam, style = styles.italic },
		mkdCodeDelimiter = { fg = colors.rose },
		mkdCodeEnd = { fg = colors.foam },
		mkdCodeStart = { fg = colors.foam },
		mkdFootnotes = { fg = colors.foam },
		mkdID = { fg = colors.foam, style = 'underline' },
		mkdInlineURL = { fg = groups.link, style = 'underline' },
		mkdLink = { link = 'mkdInlineURL' },
		mkdLinkDef = { link = 'mkdInlineURL' },
		mkdListItemLine = { fg = colors.text },
		mkdRule = { fg = colors.subtle },
		mkdURL = { link = 'mkdInlineURL' },

		DiagnosticError = { fg = groups.error },
		DiagnosticHint = { fg = groups.hint },
		DiagnosticInfo = { fg = groups.info },
		DiagnosticWarn = { fg = groups.warn },
		DiagnosticDefaultError = { fg = groups.error },
		DiagnosticDefaultHint = { fg = groups.hint },
		DiagnosticDefaultInfo = { fg = groups.info },
		DiagnosticDefaultWarn = { fg = groups.warn },
		DiagnosticFloatingError = { fg = groups.error },
		DiagnosticFloatingHint = { fg = groups.hint },
		DiagnosticFloatingInfo = { fg = groups.info },
		DiagnosticFloatingWarn = { fg = groups.warn },
		DiagnosticSignError = { fg = groups.error },
		DiagnosticSignHint = { fg = groups.hint },
		DiagnosticSignInfo = { fg = groups.info },
		DiagnosticSignWarn = { fg = groups.warn },
		DiagnosticUnderlineError = { sp = groups.error, style = 'undercurl' },
		DiagnosticUnderlineHint = { sp = groups.hint, style = 'undercurl' },
		DiagnosticUnderlineInfo = { sp = groups.info, style = 'undercurl' },
		DiagnosticUnderlineWarn = { sp = groups.warn, style = 'undercurl' },
		DiagnosticVirtualTextError = { fg = groups.error },
		DiagnosticVirtualTextHint = { fg = groups.hint },
		DiagnosticVirtualTextInfo = { fg = groups.info },
		DiagnosticVirtualTextWarn = { fg = groups.warn },

		-- TSAttribute = {},
		TSBoolean = { link = 'Boolean' },
		TSCharacter = { link = 'Character' },
		TSComment = { link = 'Comment' },
		TSConditional = { link = 'Conditional' },
		TSConstBuiltin = { fg = colors.love },
		-- TSConstMacro = {},
		TSConstant = { fg = colors.foam },
		TSConstructor = { fg = colors.foam },
		-- TSEmphasis = {},
		-- TSError = {},
		-- TSException = {},
		TSField = { fg = colors.foam },
		-- TSFloat = {},
		TSFuncBuiltin = { fg = colors.love },
		-- TSFuncMacro = {},
		TSFunction = { fg = colors.rose },
		TSInclude = { fg = colors.pine },
		TSKeyword = { fg = colors.pine },
		-- TSKeywordFunction = {},
		TSKeywordOperator = { fg = colors.subtle },
		TSLabel = { fg = colors.foam },
		-- TSLiteral = {},
		-- TSMethod = {},
		-- TSNamespace = {},
		-- TSNone = {},
		TSNumber = { link = 'Number' },
		TSOperator = { fg = colors.subtle },
		TSParameter = { fg = colors.iris, style = styles.italic },
		-- TSParameterReference = {},
		TSProperty = { fg = colors.iris, style = styles.italic },
		TSPunctBracket = { fg = groups.punctuation },
		TSPunctDelimiter = { fg = groups.punctuation },
		TSPunctSpecial = { fg = groups.punctuation },
		-- TSRepeat = {},
		-- TSStrike = {},
		TSString = { link = 'String' },
		TSStringEscape = { fg = colors.pine },
		-- TSStringRegex = {},
		TSStringSpecial = { link = 'TSString' },
		-- TSSymbol = {},
		TSTag = { fg = colors.foam },
		TSTagDelimiter = { fg = colors.subtle },
		TSText = { fg = colors.text },
		TSTitle = { fg = groups.headings.h1, style = 'bold' },
		TSType = { link = 'Type' },
		-- TSTypeBuiltin = {},
		TSURI = { fg = groups.link },
		-- TSUnderline = {},
		TSVariable = { fg = colors.text, style = styles.italic },
		TSVariableBuiltin = { fg = colors.love },

		-- romgrk/barbar.nvim
		BufferCurrent = { fg = colors.text, bg = colors.overlay },
		BufferCurrentIndex = { fg = colors.text, bg = colors.overlay },
		BufferCurrentMod = { fg = colors.foam, bg = colors.overlay },
		BufferCurrentSign = { fg = colors.subtle, bg = colors.overlay },
		BufferCurrentTarget = { fg = colors.gold, bg = colors.overlay },
		BufferInactive = { fg = colors.subtle },
		BufferInactiveIndex = { fg = colors.subtle },
		BufferInactiveMod = { fg = colors.foam },
		BufferInactiveSign = { fg = colors.muted },
		BufferInactiveTarget = { fg = colors.gold },
		BufferTabpageFill = { fg = colors.base, bg = colors.base },
		BufferVisible = { fg = colors.subtle },
		BufferVisibleIndex = { fg = colors.subtle },
		BufferVisibleMod = { fg = colors.foam },
		BufferVisibleSign = { fg = colors.muted },
		BufferVisibleTarget = { fg = colors.gold },

		-- lewis6991/gitsigns.nvim
		GitSignsAdd = { fg = groups.git_add },
		GitSignsChange = { fg = groups.git_change },
		GitSignsDelete = { fg = groups.git_delete },
		SignAdd = { link = 'GitSignsAdd' },
		SignChange = { link = 'GitSignsChange' },
		SignDelete = { link = 'GitSignsDelete' },

		-- mvllow/modes.nvim
		ModesCopy = { bg = colors.gold },
		ModesDelete = { bg = colors.love },
		ModesInsert = { bg = colors.foam },
		ModesVisual = { bg = colors.iris },

		-- kyazdani42/nvim-tree.lua
		NvimTreeEmptyFolderName = { fg = colors.muted },
		NvimTreeFileDeleted = { fg = colors.love },
		NvimTreeFileDirty = { fg = colors.rose },
		NvimTreeFileMerge = { fg = colors.iris },
		NvimTreeFileNew = { fg = colors.foam },
		NvimTreeFileRenamed = { fg = colors.pine },
		NvimTreeFileStaged = { fg = colors.iris },
		NvimTreeFolderIcon = { fg = colors.subtle },
		NvimTreeFolderName = { fg = colors.foam },
		NvimTreeGitDeleted = { fg = groups.git_delete },
		NvimTreeGitDirty = { fg = groups.git_dirty },
		NvimTreeGitIgnored = { fg = groups.git_ignore },
		NvimTreeGitMerge = { fg = groups.git_merge },
		NvimTreeGitNew = { fg = groups.git_add },
		NvimTreeGitRenamed = { fg = groups.git_rename },
		NvimTreeGitStaged = { fg = groups.git_stage },
		NvimTreeImageFile = { fg = colors.text },
		NvimTreeNormal = { fg = colors.text },
		NvimTreeOpenedFile = { fg = colors.text, bg = colors.highlight_med },
		NvimTreeOpenedFolderName = { fg = colors.foam },
		NvimTreeRootFolder = { fg = colors.iris },
		NvimTreeSpecialFile = { link = 'NvimTreeNormal' },
		NvimTreeWindowPicker = { fg = colors.base, bg = colors.iris },

		-- folke/which-key.nvim
		WhichKey = { fg = colors.iris },
		WhichKeyGroup = { fg = colors.foam },
		WhichKeySeparator = { fg = colors.subtle },
		WhichKeyDesc = { fg = colors.gold },
		WhichKeyFloat = { bg = colors.surface },
		WhichKeyValue = { fg = colors.rose },

		-- luka-reineke/indent-blankline.nvim
		IndentBlanklineChar = { fg = colors.muted },

		-- hrsh7th/nvim-cmp
		CmpItemAbbr = { fg = colors.subtle },
		CmpItemAbbrDeprecated = { fg = colors.subtle, style = 'strikethrough' },
		CmpItemAbbrMatch = { fg = colors.text, style = 'bold' },
		CmpItemAbbrMatchFuzzy = { fg = colors.text, style = 'bold' },
		CmpItemKind = { fg = colors.iris },
		CmpItemKindClass = { fg = colors.gold },
		CmpItemKindFunction = { fg = colors.iris },
		CmpItemKindInterface = { fg = colors.gold },
		CmpItemKindMethod = { fg = colors.iris },
		CmpItemKindSnippet = { fg = colors.iris },
		CmpItemKindVariable = { fg = colors.foam },

		-- TimUntersberger/neogit
		NeogitDiffAddHighlight = { fg = colors.foam, bg = colors.highlight_med },
		NeogitDiffContextHighlight = { bg = colors.highlight_low },
		NeogitDiffDeleteHighlight = { fg = colors.love, bg = colors.highlight_med },
		NeogitHunkHeader = { bg = colors.highlight_low },
		NeogitHunkHeaderHighlight = { bg = colors.highlight_low },

		-- vimwiki/vimwiki
		VimwikiHR = { fg = colors.subtle },
		VimwikiHeader1 = { fg = groups.headings.h1, style = 'bold' },
		VimwikiHeader2 = { fg = groups.headings.h2, style = 'bold' },
		VimwikiHeader3 = { fg = groups.headings.h3, style = 'bold' },
		VimwikiHeader4 = { fg = groups.headings.h4, style = 'bold' },
		VimwikiHeader5 = { fg = groups.headings.h5, style = 'bold' },
		VimwikiHeader6 = { fg = groups.headings.h6, style = 'bold' },
		VimwikiHeaderChar = { fg = colors.pine },
		VimwikiLink = { fg = groups.link, style = 'underline' },
		VimwikiList = { fg = colors.iris },
		VimwikiNoExistsLink = { fg = colors.love },

		-- nvim-neorg/neorg
		NeorgHeading1Prefix = { fg = groups.headings.h1, style = 'bold' },
		NeorgHeading1Title = { link = 'NeorgHeading1Prefix' },
		NeorgHeading2Prefix = { fg = groups.headings.h2, style = 'bold' },
		NeorgHeading2Title = { link = 'NeorgHeading2Prefix' },
		NeorgHeading3Prefix = { fg = groups.headings.h3, style = 'bold' },
		NeorgHeading3Title = { link = 'NeorgHeading3Prefix' },
		NeorgHeading4Prefix = { fg = groups.headings.h4, style = 'bold' },
		NeorgHeading4Title = { link = 'NeorgHeading4Prefix' },
		NeorgHeading5Prefix = { fg = groups.headings.h5, style = 'bold' },
		NeorgHeading5Title = { link = 'NeorgHeading5Prefix' },
		NeorgHeading6Prefix = { fg = groups.headings.h6, style = 'bold' },
		NeorgHeading6Title = { link = 'NeorgHeading6Prefix' },
		NeorgMarkerTitle = { fg = colors.text, style = 'bold' },

		-- tami5/lspsaga.nvim (fork of glepnir/lspsaga.nvim)
		DefinitionCount = { fg = colors.rose },
		DefinitionIcon = { fg = colors.rose },
		DefintionPreviewTitle = { fg = colors.rose, style = 'bold' },
		LspFloatWinBorder = { fg = groups.border },
		LspFloatWinNormal = { bg = colors.base },
		LspSagaAutoPreview = { fg = colors.subtle },
		LspSagaCodeActionBorder = { fg = groups.border },
		LspSagaCodeActionContent = { fg = colors.foam },
		LspSagaCodeActionTitle = { fg = colors.gold, style = 'bold' },
		LspSagaCodeActionTruncateLine = { link = 'LspSagaCodeActionBorder' },
		LspSagaDefPreviewBorder = { fg = groups.border },
		LspSagaDiagnosticBorder = { fg = groups.border },
		LspSagaDiagnosticHeader = { fg = colors.gold, style = 'bold' },
		LspSagaDiagnosticTruncateLine = { link = 'LspSagaDiagnosticBorder' },
		LspSagaDocTruncateLine = { link = 'LspSagaHoverBorder' },
		LspSagaFinderSelection = { fg = colors.gold },
		LspSagaHoverBorder = { fg = groups.border },
		LspSagaLspFinderBorder = { fg = groups.border },
		LspSagaRenameBorder = { fg = colors.pine },
		LspSagaRenamePromptPrefix = { fg = colors.love },
		LspSagaShTruncateLine = { link = 'LspSagaSignatureHelpBorder' },
		LspSagaSignatureHelpBorder = { fg = colors.pine },
		ReferencesCount = { fg = colors.rose },
		ReferencesIcon = { fg = colors.rose },
		SagaShadow = { bg = colors.overlay },
		TargetWord = { fg = colors.iris },

		-- ray-x/lsp_signature.nvim
		LspSignatureActiveParameter = { bg = colors.overlay },

		-- rlane/pounce.nvim
		PounceAccept = { fg = colors.love, bg = colors.highlight_high },
		PounceAcceptBest = { fg = colors.base, bg = colors.gold },
		PounceGap = { link = 'Search' },
		PounceMatch = { link = 'Search' },

		-- nvim-telescope/telescope.nvim
		TelescopeBorder = { fg = groups.border },
		TelescopeMatching = { fg = colors.rose },
		TelescopeNormal = { fg = colors.subtle },
		TelescopePromptNormal = { fg = colors.text },
		TelescopePromptPrefix = { fg = colors.subtle },
		TelescopeSelection = { fg = colors.text, bg = colors.overlay },
		TelescopeSelectionCaret = { fg = colors.rose, bg = colors.overlay },
		TelescopeTitle = { fg = colors.subtle },
	}

	vim.g.terminal_color_0 = colors.overlay -- black
	vim.g.terminal_color_8 = colors.subtle -- bright black
	vim.g.terminal_color_1 = colors.love -- red
	vim.g.terminal_color_9 = colors.love -- bright red
	vim.g.terminal_color_2 = colors.pine -- green
	vim.g.terminal_color_10 = colors.pine -- bright green
	vim.g.terminal_color_3 = colors.gold -- yellow
	vim.g.terminal_color_11 = colors.gold -- bright yellow
	vim.g.terminal_color_4 = colors.foam -- blue
	vim.g.terminal_color_12 = colors.foam -- bright blue
	vim.g.terminal_color_5 = colors.iris -- magenta
	vim.g.terminal_color_13 = colors.iris -- bright magenta
	vim.g.terminal_color_6 = colors.rose -- cyan
	vim.g.terminal_color_14 = colors.rose -- bright cyan
	vim.g.terminal_color_7 = colors.text -- white
	vim.g.terminal_color_15 = colors.text -- bright white

	return theme
end

return M
